name: voluntik_prod

services:
  db:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    image: voluntik-postgres
    container_name: voluntik-db-prod
    environment:
      POSTGRES_DB: voluntik_prod
      POSTGRES_USER: voluntik_user
      POSTGRES_PASSWORD: securepassword
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth=md5
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voluntik_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    build:
      context: .
      dockerfile: redis.Dockerfile
    image: voluntik-redis
    container_name: voluntik-redis-master-prod
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru"]
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-replica1:
    build:
      context: .
      dockerfile: redis.Dockerfile
    image: voluntik-redis
    container_name: voluntik-redis-replica1-prod
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru", "--replicaof", "redis-master", "6379"]
    depends_on:
      - redis-master
    volumes:
      - redis-replica1-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-replica2:
    build:
      context: .
      dockerfile: redis.Dockerfile
    image: voluntik-redis
    container_name: voluntik-redis-replica2-prod
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru", "--replicaof", "redis-master", "6379"]
    depends_on:
      - redis-master
    volumes:
      - redis-replica2-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  sentinel1:
    image: redis:7-alpine
    container_name: voluntik-sentinel1-prod
    command: sh -c 'echo "sentinel monitor mymaster redis-master 6379 2" > /etc/sentinel.conf && echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf && echo "sentinel failover-timeout mymaster 30000" >> /etc/sentinel.conf && redis-sentinel /etc/sentinel.conf'
    depends_on:
      - redis-master
      - redis-replica1
      - redis-replica2
    ports:
      - "26379:26379"

  sentinel2:
    image: redis:7-alpine
    container_name: voluntik-sentinel2-prod
    command: sh -c 'echo "sentinel monitor mymaster redis-master 6379 2" > /etc/sentinel.conf && echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf && echo "sentinel failover-timeout mymaster 30000" >> /etc/sentinel.conf && redis-sentinel /etc/sentinel.conf'
    depends_on:
      - redis-master
      - redis-replica1
      - redis-replica2
    ports:
      - "26380:26379"

  sentinel3:
    image: redis:7-alpine
    container_name: voluntik-sentinel3-prod
    command: sh -c 'echo "sentinel monitor mymaster redis-master 6379 2" > /etc/sentinel.conf && echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf && echo "sentinel failover-timeout mymaster 30000" >> /etc/sentinel.conf && redis-sentinel /etc/sentinel.conf'
    depends_on:
      - redis-master
      - redis-replica1
      - redis-replica2
    ports:
      - "26381:26379"

  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: voluntik-pgbouncer-prod
    depends_on:
      - db
    ports:
      - "6432:5432"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=voluntik_user
      - DB_PASSWORD=securepassword
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=300
      - DEFAULT_POOL_SIZE=100

  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend.Dockerfile
    image: voluntik-backend
    container_name: voluntik-backend-prod
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_SENTINEL_HOSTS=sentinel1:26379,sentinel2:26379,sentinel3:26379
      - REDIS_MASTER_NAME=mymaster
      - ENV=production

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend.Dockerfile
    image: voluntik-frontend
    container_name: voluntik-frontend-prod
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - ENV=production

  nginx:
    image: nginx:latest
    container_name: voluntik-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot-prod/www:/var/www/certbot/:ro
      - ./certbot-prod/conf:/etc/letsencrypt/:ro
    depends_on:
      - frontend
      - backend

  certbot:
    image: certbot/certbot:latest
    container_name: voluntik-certbot-prod
    volumes:
      - ./certbot-prod/www/:/var/www/certbot/:rw
      - ./certbot-prod/conf/:/etc/letsencrypt/:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  db-data:
  redis-master-data:
  redis-replica1-data:
  redis-replica2-data: